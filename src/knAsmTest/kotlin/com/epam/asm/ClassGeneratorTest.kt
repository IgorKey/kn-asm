package com.epam.asm

import org.objectweb.kn.asm.*
import kotlin.test.Test
import kotlin.test.assertTrue

val target = listOf<Byte>(
    -54,
    -2,
    -70,
    -66,
    0,
    0,
    0,
    52,
    0,
    23,
    1,
    0,
    19,
    99,
    111,
    109,
    47,
    101,
    112,
    97,
    109,
    47,
    107,
    118,
    109,
    116,
    105,
    47,
    71,
    108,
    111,
    98,
    7,
    0,
    1,
    1,
    0,
    16,
    106,
    97,
    118,
    97,
    47,
    108,
    97,
    110,
    103,
    47,
    79,
    98,
    106,
    101,
    99,
    116,
    7,
    0,
    3,
    1,
    0,
    9,
    71,
    108,
    111,
    98,
    46,
    106,
    97,
    118,
    97,
    1,
    0,
    11,
    111,
    117,
    114,
    73,
    110,
    115,
    116,
    97,
    110,
    99,
    101,
    1,
    0,
    21,
    76,
    99,
    111,
    109,
    47,
    101,
    112,
    97,
    109,
    47,
    107,
    118,
    109,
    116,
    105,
    47,
    71,
    108,
    111,
    98,
    59,
    1,
    0,
    11,
    103,
    101,
    116,
    73,
    110,
    115,
    116,
    97,
    110,
    99,
    101,
    1,
    0,
    23,
    40,
    41,
    76,
    99,
    111,
    109,
    47,
    101,
    112,
    97,
    109,
    47,
    107,
    118,
    109,
    116,
    105,
    47,
    71,
    108,
    111,
    98,
    59,
    12,
    0,
    6,
    0,
    7,
    9,
    0,
    2,
    0,
    10,
    1,
    0,
    6,
    60,
    105,
    110,
    105,
    116,
    62,
    1,
    0,
    3,
    40,
    41,
    86,
    12,
    0,
    12,
    0,
    13,
    10,
    0,
    4,
    0,
    14,
    1,
    0,
    4,
    116,
    104,
    105,
    115,
    1,
    0,
    8,
    60,
    99,
    108,
    105,
    110,
    105,
    116,
    62,
    10,
    0,
    2,
    0,
    14,
    1,
    0,
    4,
    67,
    111,
    100,
    101,
    1,
    0,
    15,
    76,
    105,
    110,
    101,
    78,
    117,
    109,
    98,
    101,
    114,
    84,
    97,
    98,
    108,
    101,
    1,
    0,
    18,
    76,
    111,
    99,
    97,
    108,
    86,
    97,
    114,
    105,
    97,
    98,
    108,
    101,
    84,
    97,
    98,
    108,
    101,
    1,
    0,
    10,
    83,
    111,
    117,
    114,
    99,
    101,
    70,
    105,
    108,
    101,
    0,
    33,
    0,
    2,
    0,
    4,
    0,
    0,
    0,
    1,
    0,
    10,
    0,
    6,
    0,
    7,
    0,
    0,
    0,
    3,
    0,
    9,
    0,
    8,
    0,
    9,
    0,
    1,
    0,
    19,
    0,
    0,
    0,
    28,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    4,
    -78,
    0,
    11,
    -80,
    0,
    0,
    0,
    1,
    0,
    20,
    0,
    0,
    0,
    6,
    0,
    1,
    0,
    0,
    0,
    7,
    0,
    2,
    0,
    12,
    0,
    13,
    0,
    1,
    0,
    19,
    0,
    0,
    0,
    51,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    5,
    42,
    -73,
    0,
    15,
    -79,
    0,
    0,
    0,
    2,
    0,
    21,
    0,
    0,
    0,
    12,
    0,
    1,
    0,
    0,
    0,
    5,
    0,
    16,
    0,
    7,
    0,
    0,
    0,
    20,
    0,
    0,
    0,
    10,
    0,
    2,
    0,
    0,
    0,
    10,
    0,
    4,
    0,
    11,
    0,
    8,
    0,
    17,
    0,
    13,
    0,
    1,
    0,
    19,
    0,
    0,
    0,
    35,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    11,
    -69,
    0,
    2,
    89,
    -73,
    0,
    18,
    -77,
    0,
    11,
    -79,
    0,
    0,
    0,
    1,
    0,
    20,
    0,
    0,
    0,
    6,
    0,
    1,
    0,
    0,
    0,
    4,
    0,
    1,
    0,
    22,
    0,
    0,
    0,
    2,
    0,
    5
)


class ClassGeneratorTest {
    @Test
    fun equalsContent() {
        val cw = ClassWriter(0)
        var fv: FieldVisitor
        var mv: MethodVisitor

        cw.visit(52, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, "com/epam/kvmti/Glob", null, "java/lang/Object", null)

        cw.visitSource("Glob.java", null)

        run {
            fv = cw.visitField(
                Opcodes.ACC_PRIVATE + Opcodes.ACC_STATIC,
                "ourInstance",
                "Lcom/epam/kvmti/Glob;",
                null,
                null
            )
            fv.visitEnd()
        }
        run {
            mv = cw.visitMethod(
                Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC,
                "getInstance",
                "()Lcom/epam/kvmti/Glob;",
                null,
                null
            )
            mv.visitCode()
            val l0 = Label()
            mv.visitLabel(l0)
            mv.visitLineNumber(7, l0)
            mv.visitFieldInsn(Opcodes.GETSTATIC, "com/epam/kvmti/Glob", "ourInstance", "Lcom/epam/kvmti/Glob;")
            mv.visitInsn(Opcodes.ARETURN)
            mv.visitMaxs(1, 0)
            mv.visitEnd()
        }
        run {
            mv = cw.visitMethod(Opcodes.ACC_PRIVATE, "<init>", "()V", null, null)
            mv.visitCode()
            val l0 = Label()
            mv.visitLabel(l0)
            mv.visitLineNumber(10, l0)
            mv.visitVarInsn(Opcodes.ALOAD, 0)
            mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V")
            val l1 = Label()
            mv.visitLabel(l1)
            mv.visitLineNumber(11, l1)
            mv.visitInsn(Opcodes.RETURN)
            val l2 = Label()
            mv.visitLabel(l2)
            mv.visitLocalVariable("this", "Lcom/epam/kvmti/Glob;", null, l0, l2, 0)
            mv.visitMaxs(1, 1)
            mv.visitEnd()
        }
        run {
            mv = cw.visitMethod(Opcodes.ACC_STATIC, "<clinit>", "()V", null, null)
            mv.visitCode()
            val l0 = Label()
            mv.visitLabel(l0)
            mv.visitLineNumber(4, l0)
            mv.visitTypeInsn(Opcodes.NEW, "com/epam/kvmti/Glob")
            mv.visitInsn(Opcodes.DUP)
            mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "com/epam/kvmti/Glob", "<init>", "()V")
            mv.visitFieldInsn(Opcodes.PUTSTATIC, "com/epam/kvmti/Glob", "ourInstance", "Lcom/epam/kvmti/Glob;")
            mv.visitInsn(Opcodes.RETURN)
            mv.visitMaxs(2, 0)
            mv.visitEnd()
        }
        cw.visitEnd()

        val bytes = cw.toByteArray()
        assertTrue(bytes.contentEquals(target.toByteArray()))
    }
}